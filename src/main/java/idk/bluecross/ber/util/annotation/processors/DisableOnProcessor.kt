package idk.bluecross.ber.util.annotation.processors

import idk.bluecross.ber.api.module.IModule
import idk.bluecross.ber.impl.event.ConnectionEvent
import idk.bluecross.ber.util.annotation.annotations.DisableOn
import idk.bluecross.ber.util.annotation.processors.AutoInitProcessor.IProcessor
import idk.bluecross.ber.util.annotation.processors.AutoInitProcessor.InitProcessor
import idk.bluecross.ber.util.interfaces.IEventBusRegistrar
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent
import org.reflections.Reflections
import org.reflections.scanners.Scanners
import kotlin.reflect.full.findAnnotation

@InitProcessor
object DisableOnProcessor : IProcessor, IEventBusRegistrar {
    init {
        register()
    }

    val annotations = arrayListOf<Pair<DisableOn, IModule>>()

    override fun process() {
        Reflections(Reflections("idk.bluecross.ber.module.modules").getSubTypesOf(IModule::class.java))
                .getTypesAnnotatedWith(DisableOn::class.java)
                .forEach {
                    val module = it as Class<IModule>
                    val ann = module.kotlin.findAnnotation<DisableOn>()!!
                    annotations.add(Pair(ann, module.kotlin.objectInstance!!))
                }
    }

    @SubscribeEvent
    fun onDisconnect(e: ConnectionEvent.Disconnect) {
        annotations.filter { it.first.reason.contains(DisableOn.Reason.DISCONNECT) }.forEach {
            it.second.disable()
        }
    }

}