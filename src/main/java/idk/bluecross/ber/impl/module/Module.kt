package idk.bluecross.ber.impl.module

import idk.bluecross.ber.api.input.keyboard.IKeyBind
import idk.bluecross.ber.input.ModuleKeyBind
import idk.bluecross.ber.api.module.IModule
import idk.bluecross.ber.api.module.IModuleData
import idk.bluecross.ber.impl.setting.ISettingRegistrar
import idk.bluecross.ber.impl.setting.ModuleSetting
import idk.bluecross.ber.impl.setting.settings.*
import idk.bluecross.ber.util.ChatUtil
import idk.bluecross.ber.util.annotation.annotations.AutoInit
import idk.bluecross.ber.util.interfaces.Globals
import idk.bluecross.ber.util.interfaces.IEventBusRegistrar
import org.lwjgl.input.Keyboard

@AutoInit
abstract class Module(override var description: String) : IEventBusRegistrar, Globals, IModule, ISettingRegistrar {

    override var name = this::class.simpleName!!
    override var category: IModuleData.Category? = null
    override var keybind: IKeyBind = ModuleKeyBind(Keyboard.KEY_NONE, this)
    override val settings = arrayListOf<ModuleSetting<*>>()
    override var enabled = false
        set(value) {
            val prevValue = field
            field = value
            when (value) {
                true -> {
                    if (!prevValue) onEnable_()
                }

                false -> {
                    if (prevValue) onDisable_()
                }
            }
        }

    init {
        registerModule()
        modules.add(this)
    }
    companion object{
        val modules = arrayListOf<Module>()
    }

    override fun toggle() = run { enabled = !enabled; return@run enabled }
    override fun enable() = run { enabled = true }
    override fun disable() = run { enabled = false }

    private fun onEnable_() {
        register(this)
        println("$name enabled!")
        ChatUtil.sendMessageToPlayer("$name enabled!")
        onEnable()
    }

    override fun onEnable() {}
    private fun onDisable_() {
        unregister(this)
        onDisable()
        println("$name disabled!")
        ChatUtil.sendMessageToPlayer("$name disabled!")
    }

    override fun onDisable() {}
    override fun <T : Boolean> setting(name: String, value: T): BoolSetting {
        return BoolSetting(this, name, value)
    }

    override fun <T : String> setting(name: String, value: T): StringSetting {
        return StringSetting(this, name, value)
    }

    override fun <T : Enum<T>> setting(name: String, value: T): EnumSetting<T> {
        return EnumSetting(this, name, value)
    }

    override fun <T : Float> setting(name: String, range: ClosedRange<T>, value: T): FloatSetting {
        return FloatSetting(this, name, range as ClosedRange<Float>, value)
    }

    override fun <T : Int> setting(name: String, range: ClosedRange<T>, value: T): IntSetting {
        return IntSetting(this, name, range as ClosedRange<Int>, value)
    }
}