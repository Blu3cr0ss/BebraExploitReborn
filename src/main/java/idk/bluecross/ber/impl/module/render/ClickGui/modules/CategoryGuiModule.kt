package idk.bluecross.ber.impl.module.render.ClickGui.modules

import idk.bluecross.ber.api.module.IModule
import idk.bluecross.ber.api.module.IModuleData
import idk.bluecross.ber.impl.module.Module
import idk.bluecross.ber.impl.module.render.ClickGui.ClickGuiUtil
import idk.bluecross.ber.impl.module.render.ClickGui.ColorDto
import java.awt.Color

class CategoryGuiModule(override var posX: Int, override var posY: Int, val category: IModuleData.Category, val colorDto: ColorDto) : DefaultGuiModule(
        category.name,
        posX,
        posY,
        150,
        15,
        2,
        true,
        colorDto.bgColor,
        colorDto.borderColor,
        colorDto.textColor
) {
    init {
        initModules()
    }
    // dragging vars
    var dragging = false
    var xOffset = 0
    var yOffset = 0

    // modules
    val modules = arrayListOf<ModuleGuiModule>()

    override fun handleClick(mouseX: Int, mouseY: Int, mouseButton: Int) {
        if (mouseButton == ClickGuiUtil.MOUSE_BUTTON.LEFT.ordinal) {
            handleDragging(mouseX, mouseY)
        }
    }

    override fun handleMouseRelease(mouseX: Int, mouseY: Int, state: Int) {
        stopDragging(mouseX, mouseY)
    }

    override fun draw(mouseX: Int, mouseY: Int, partialTicks: Float) {
        if (dragging) {
            posX = mouseX - xOffset
            posY = mouseY - yOffset
        }
        modules.forEach { it.draw(mouseX, mouseY, partialTicks, dragging, xOffset, yOffset) }
        super.draw(mouseX, mouseY, partialTicks)
    }

    fun handleDragging(mouseX: Int, mouseY: Int) {
        dragging = true
        xOffset = mouseX - posX;
        yOffset = mouseY - posY;
    }

    fun stopDragging(mouseX: Int, mouseY: Int) {
        dragging = false
        xOffset = 0
        yOffset = 0
    }

    override fun close() {
        dragging = false
    }

    fun initModules() {
        this.modules.clear()
        Module.modules.filter { it.category == this.category }.forEachIndexed { i, module ->
            val i = i + 1
            this.modules.add(ModuleGuiModule(posX + 2, posY + i * 15 + i * 1, module, colorDto))
        }
    }
}