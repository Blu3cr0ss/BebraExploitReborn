package idk.bluecross.ber.forge.mixin;

import idk.bluecross.ber.impl.event.PacketGetEvent;
import idk.bluecross.ber.impl.event.PacketSendEvent;
import io.netty.channel.ChannelHandlerContext;
import net.minecraft.network.NetworkManager;
import net.minecraft.network.Packet;
import net.minecraftforge.common.MinecraftForge;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

@Mixin(NetworkManager.class)
public class MixinNetworkManager {
    @Inject(method = "sendPacket(Lnet/minecraft/network/Packet;)V", at = @At("HEAD"), cancellable = true)
    private void onSendPacket(Packet<?> packet, CallbackInfo callbackInfo) {
        PacketSendEvent event = new PacketSendEvent(packet);
        MinecraftForge.EVENT_BUS.post(event);
        if (event.isCanceled( ) && callbackInfo.isCancellable( )) {
            callbackInfo.cancel( );
        }
        packet = event.getPacket();
    }

    @Inject(method = "channelRead0(Lio/netty/channel/ChannelHandlerContext;Lnet/minecraft/network/Packet;)V", at = @At("HEAD"), cancellable = true)
    private void onChannelRead(ChannelHandlerContext context, Packet<?> packet, CallbackInfo callbackInfo) {
        PacketGetEvent event = new PacketGetEvent(packet);
        MinecraftForge.EVENT_BUS.post(event);
        if (event.isCanceled( ) && callbackInfo.isCancellable( )) {
            callbackInfo.cancel( );
        }
        packet = event.getPacket();
    }
}